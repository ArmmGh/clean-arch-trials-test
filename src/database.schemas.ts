// Generated by ts-to-zod
import { z } from "zod";
import { Json } from "./database.types";

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable(),
);

export const envTypeSchema = z.union([
  z.literal("development"),
  z.literal("test"),
  z.literal("production"),
]);

export const adminsInsertSchema = z.object({
  address: z.string(),
  environment: envTypeSchema,
  id: z.string().optional(),
  last_login: z.string().optional().nullable(),
  session_expiry: z.string().optional().nullable(),
  session_token: z.string().optional().nullable(),
});

export const adminsUpdateSchema = z.object({
  address: z.string().optional(),
  environment: envTypeSchema.optional(),
  id: z.string().optional(),
  last_login: z.string().optional().nullable(),
  session_expiry: z.string().optional().nullable(),
  session_token: z.string().optional().nullable(),
});

export const adminsRelationshipsSchema = z.tuple([]);

export const announcementTypeSchema = z.union([
  z.literal("ChannelAnnounced"),
  z.literal("PublicationAnnounced"),
  z.literal("MessageAnnounced"),
]);

export const entityTypeSchema = z.union([
  z.literal("Channel"),
  z.literal("Publication"),
  z.literal("Tower"),
]);

export const announcementsInsertSchema = z.object({
  announcement_type: announcementTypeSchema,
  entity_id: z.number().optional().nullable(),
  entity_type: entityTypeSchema.optional().nullable(),
  id: z.number(),
  message: z.string().optional().nullable(),
  price_paid: z.number().optional().nullable(),
  tower_id: z.number().optional().nullable(),
});

export const announcementsUpdateSchema = z.object({
  announcement_type: announcementTypeSchema.optional(),
  entity_id: z.number().optional().nullable(),
  entity_type: entityTypeSchema.optional().nullable(),
  id: z.number().optional(),
  message: z.string().optional().nullable(),
  price_paid: z.number().optional().nullable(),
  tower_id: z.number().optional().nullable(),
});

export const announcementsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("announcements_tower_id_fkey"),
    columns: z.tuple([z.literal("tower_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("towers"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const behaviorBlockRowSchema = z.object({
  behavior_id: z.number(),
  created_at: z.string().nullable(),
  entity_id: z.number(),
  entity_type: entityTypeSchema,
  id: z.number().nullable(),
});

export const behaviorBlockInsertSchema = z.object({
  behavior_id: z.number(),
  created_at: z.string().optional().nullable(),
  entity_id: z.number(),
  entity_type: entityTypeSchema,
  id: z.number().optional().nullable(),
});

export const behaviorBlockUpdateSchema = z.object({
  behavior_id: z.number().optional(),
  created_at: z.string().optional().nullable(),
  entity_id: z.number().optional(),
  entity_type: entityTypeSchema.optional(),
  id: z.number().optional().nullable(),
});

export const behaviorBlockRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("behavior_block_behavior_id_fkey"),
    columns: z.tuple([z.literal("behavior_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("behaviors"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const behaviorFollowRowSchema = z.object({
  behavior_id: z.number(),
  created_at: z.string().nullable(),
  entity_id: z.number(),
  entity_type: entityTypeSchema,
  id: z.number().nullable(),
});

export const behaviorFollowInsertSchema = z.object({
  behavior_id: z.number(),
  created_at: z.string().optional().nullable(),
  entity_id: z.number(),
  entity_type: entityTypeSchema,
  id: z.number().optional().nullable(),
});

export const behaviorFollowUpdateSchema = z.object({
  behavior_id: z.number().optional(),
  created_at: z.string().optional().nullable(),
  entity_id: z.number().optional(),
  entity_type: entityTypeSchema.optional(),
  id: z.number().optional().nullable(),
});

export const behaviorFollowRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("behavior_follow_behavior_id_fkey"),
    columns: z.tuple([z.literal("behavior_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("behaviors"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const topicSchema = z.union([
  z.literal("Sports"),
  z.literal("Politics"),
  z.literal("Economics"),
  z.literal("Technology"),
  z.literal("Entertainment"),
  z.literal("Health"),
]);

export const behaviorInterestedTopicsInsertSchema = z.object({
  behavior_id: z.number(),
  id: z.number().optional().nullable(),
  topic: topicSchema,
});

export const behaviorInterestedTopicsUpdateSchema = z.object({
  behavior_id: z.number().optional(),
  id: z.number().optional().nullable(),
  topic: topicSchema.optional(),
});

export const behaviorInterestedTopicsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("behavior_interested_topics_behavior_id_fkey"),
    columns: z.tuple([z.literal("behavior_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("behaviors"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const behaviorLikeRowSchema = z.object({
  behavior_id: z.number(),
  created_at: z.string().nullable(),
  entity_id: z.number(),
  entity_type: entityTypeSchema,
  id: z.number().nullable(),
});

export const behaviorLikeInsertSchema = z.object({
  behavior_id: z.number(),
  created_at: z.string().optional().nullable(),
  entity_id: z.number(),
  entity_type: entityTypeSchema,
  id: z.number().optional().nullable(),
});

export const behaviorLikeUpdateSchema = z.object({
  behavior_id: z.number().optional(),
  created_at: z.string().optional().nullable(),
  entity_id: z.number().optional(),
  entity_type: entityTypeSchema.optional(),
  id: z.number().optional().nullable(),
});

export const behaviorLikeRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("behavior_like_behavior_id_fkey"),
    columns: z.tuple([z.literal("behavior_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("behaviors"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const behaviorsRowSchema = z.object({
  consumer_address: z.string(),
  created_at: z.string().nullable(),
  id: z.number(),
  profile_picture_url: z.string().nullable(),
  username: z.string().nullable(),
});

export const behaviorsInsertSchema = z.object({
  consumer_address: z.string(),
  created_at: z.string().optional().nullable(),
  id: z.number(),
  profile_picture_url: z.string().optional().nullable(),
  username: z.string().optional().nullable(),
});

export const behaviorsUpdateSchema = z.object({
  consumer_address: z.string().optional(),
  created_at: z.string().optional().nullable(),
  id: z.number().optional(),
  profile_picture_url: z.string().optional().nullable(),
  username: z.string().optional().nullable(),
});

export const behaviorsRelationshipsSchema = z.tuple([]);

export const channelNotificationsRowSchema = z.object({
  channel_address: z.string(),
  created_at: z.string(),
  id: z.number(),
  last_read_timestamp: z.string(),
  user_address: z.string(),
});

export const channelNotificationsInsertSchema = z.object({
  channel_address: z.string(),
  created_at: z.string().optional(),
  id: z.number().optional(),
  last_read_timestamp: z.string().optional(),
  user_address: z.string(),
});

export const channelNotificationsUpdateSchema = z.object({
  channel_address: z.string().optional(),
  created_at: z.string().optional(),
  id: z.number().optional(),
  last_read_timestamp: z.string().optional(),
  user_address: z.string().optional(),
});

export const channelNotificationsRelationshipsSchema = z.tuple([]);

export const channelRequestStatusSchema = z.union([
  z.literal("pending"),
  z.literal("whitelisted"),
  z.literal("blacklisted"),
]);

export const channelRequestsInsertSchema = z.object({
  channel_address: z.string(),
  channel_owner: z.string(),
  created_at: z.string().optional(),
  environment: envTypeSchema.optional(),
  id: z.number().optional(),
  status: channelRequestStatusSchema,
});

export const channelRequestsUpdateSchema = z.object({
  channel_address: z.string().optional(),
  channel_owner: z.string().optional(),
  created_at: z.string().optional(),
  environment: envTypeSchema.optional(),
  id: z.number().optional(),
  status: channelRequestStatusSchema.optional(),
});

export const channelRequestsRelationshipsSchema = z.tuple([]);

export const verificationStatusSchema = z.union([
  z.literal("Unverified"),
  z.literal("Verified"),
  z.literal("Pending"),
]);

export const channelsInsertSchema = z.object({
  avatar_url: z.string().optional().nullable(),
  channel_address: z.string(),
  created_at: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  env_type: envTypeSchema.optional().nullable(),
  id: z.number().optional(),
  name: z.string().optional().nullable(),
  owner_address: z.string().optional().nullable(),
  verification_status: verificationStatusSchema.optional().nullable(),
});

export const channelsUpdateSchema = z.object({
  avatar_url: z.string().optional().nullable(),
  channel_address: z.string().optional(),
  created_at: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  env_type: envTypeSchema.optional().nullable(),
  id: z.number().optional(),
  name: z.string().optional().nullable(),
  owner_address: z.string().optional().nullable(),
  verification_status: verificationStatusSchema.optional().nullable(),
});

export const channelsRelationshipsSchema = z.tuple([]);

export const entityMetricsRowSchema = z.object({
  blocks: z.number().nullable(),
  comments: z.number().nullable(),
  dislikes: z.number().nullable(),
  entity_id: z.number().nullable(),
  entity_type: entityTypeSchema.nullable(),
  followers: z.number().nullable(),
  id: z.number(),
  likes: z.number().nullable(),
  saved: z.number().nullable(),
  updated_at: z.string().nullable(),
});

export const entityMetricsInsertSchema = z.object({
  blocks: z.number().optional().nullable(),
  comments: z.number().optional().nullable(),
  dislikes: z.number().optional().nullable(),
  entity_id: z.number().optional().nullable(),
  entity_type: entityTypeSchema.optional().nullable(),
  followers: z.number().optional().nullable(),
  id: z.number(),
  likes: z.number().optional().nullable(),
  saved: z.number().optional().nullable(),
  updated_at: z.string().optional().nullable(),
});

export const entityMetricsUpdateSchema = z.object({
  blocks: z.number().optional().nullable(),
  comments: z.number().optional().nullable(),
  dislikes: z.number().optional().nullable(),
  entity_id: z.number().optional().nullable(),
  entity_type: entityTypeSchema.optional().nullable(),
  followers: z.number().optional().nullable(),
  id: z.number().optional(),
  likes: z.number().optional().nullable(),
  saved: z.number().optional().nullable(),
  updated_at: z.string().optional().nullable(),
});

export const entityMetricsRelationshipsSchema = z.tuple([]);

export const likelihoodSchema = z.union([
  z.literal("Unknown"),
  z.literal("VeryUnlikely"),
  z.literal("Unlikely"),
  z.literal("Possible"),
  z.literal("Likely"),
  z.literal("Verylikely"),
]);

export const publicationAssessmentInsertSchema = z.object({
  adult_likelihood: likelihoodSchema.optional().nullable(),
  assessed_at: z.string().optional().nullable(),
  id: z.number(),
  medical_likelihood: likelihoodSchema.optional().nullable(),
  publication_id: z.number().optional().nullable(),
  racy_likelihood: likelihoodSchema.optional().nullable(),
  spoof_likelihood: likelihoodSchema.optional().nullable(),
  violence_likelihood: likelihoodSchema.optional().nullable(),
});

export const publicationAssessmentUpdateSchema = z.object({
  adult_likelihood: likelihoodSchema.optional().nullable(),
  assessed_at: z.string().optional().nullable(),
  id: z.number().optional(),
  medical_likelihood: likelihoodSchema.optional().nullable(),
  publication_id: z.number().optional().nullable(),
  racy_likelihood: likelihoodSchema.optional().nullable(),
  spoof_likelihood: likelihoodSchema.optional().nullable(),
  violence_likelihood: likelihoodSchema.optional().nullable(),
});

export const publicationAssessmentRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("publication_assessment_publication_id_fkey"),
    columns: z.tuple([z.literal("publication_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("publications"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicationTopicsRowSchema = z.object({
  publication_id: z.number().nullable(),
  topic: topicSchema.nullable(),
});

export const publicationTopicsInsertSchema = z.object({
  publication_id: z.number().optional().nullable(),
  topic: topicSchema.optional().nullable(),
});

export const publicationTopicsUpdateSchema = z.object({
  publication_id: z.number().optional().nullable(),
  topic: topicSchema.optional().nullable(),
});

export const publicationTopicsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("publication_topics_publication_id_fkey"),
    columns: z.tuple([z.literal("publication_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("publications"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicationsRowSchema = z.object({
  channel_id: z.number().nullable(),
  env_type: envTypeSchema.nullable(),
  id: z.number(),
  publication_address: z.string(),
  publication_index: z.number().nullable(),
});

export const publicationsInsertSchema = z.object({
  channel_id: z.number().optional().nullable(),
  env_type: envTypeSchema.optional().nullable(),
  id: z.number(),
  publication_address: z.string(),
  publication_index: z.number().optional().nullable(),
});

export const publicationsUpdateSchema = z.object({
  channel_id: z.number().optional().nullable(),
  env_type: envTypeSchema.optional().nullable(),
  id: z.number().optional(),
  publication_address: z.string().optional(),
  publication_index: z.number().optional().nullable(),
});

export const publicationsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("publications_channel_id_fkey"),
    columns: z.tuple([z.literal("channel_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("channels"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const towersRowSchema = z.object({
  avatar_url: z.string().nullable(),
  created_at: z.string().nullable(),
  description: z.string().nullable(),
  id: z.number(),
  name: z.string().nullable(),
  tower_address: z.string(),
});

export const towersInsertSchema = z.object({
  avatar_url: z.string().optional().nullable(),
  created_at: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  id: z.number(),
  name: z.string().optional().nullable(),
  tower_address: z.string(),
});

export const towersUpdateSchema = z.object({
  avatar_url: z.string().optional().nullable(),
  created_at: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  id: z.number().optional(),
  name: z.string().optional().nullable(),
  tower_address: z.string().optional(),
});

export const towersRelationshipsSchema = z.tuple([]);

export const adminsRowSchema = z.object({
  address: z.string(),
  environment: envTypeSchema,
  id: z.string(),
  last_login: z.string().nullable(),
  session_expiry: z.string().nullable(),
  session_token: z.string().nullable(),
});

export const announcementsRowSchema = z.object({
  announcement_type: announcementTypeSchema,
  entity_id: z.number().nullable(),
  entity_type: entityTypeSchema.nullable(),
  id: z.number(),
  message: z.string().nullable(),
  price_paid: z.number().nullable(),
  tower_id: z.number().nullable(),
});

export const behaviorInterestedTopicsRowSchema = z.object({
  behavior_id: z.number(),
  id: z.number().nullable(),
  topic: topicSchema,
});

export const channelRequestsRowSchema = z.object({
  channel_address: z.string(),
  channel_owner: z.string(),
  created_at: z.string(),
  environment: envTypeSchema,
  id: z.number(),
  status: channelRequestStatusSchema,
});

export const channelsRowSchema = z.object({
  avatar_url: z.string().nullable(),
  channel_address: z.string(),
  created_at: z.string().nullable(),
  description: z.string().nullable(),
  env_type: envTypeSchema.nullable(),
  id: z.number(),
  name: z.string().nullable(),
  owner_address: z.string().nullable(),
  verification_status: verificationStatusSchema.nullable(),
});

export const publicationAssessmentRowSchema = z.object({
  adult_likelihood: likelihoodSchema.nullable(),
  assessed_at: z.string().nullable(),
  id: z.number(),
  medical_likelihood: likelihoodSchema.nullable(),
  publication_id: z.number().nullable(),
  racy_likelihood: likelihoodSchema.nullable(),
  spoof_likelihood: likelihoodSchema.nullable(),
  violence_likelihood: likelihoodSchema.nullable(),
});
