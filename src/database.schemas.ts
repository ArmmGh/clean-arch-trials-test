// Generated by ts-to-zod
import { z } from "zod";
import { Json } from "./database.types";

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable(),
);

export const envTypeSchema = z.union([
  z.literal("development"),
  z.literal("test"),
  z.literal("production"),
]);

export const adminsInsertSchema = z.object({
  address: z.string(),
  environment: envTypeSchema,
  id: z.string().optional(),
  last_login: z.string().optional().nullable(),
  session_expiry: z.string().optional().nullable(),
  session_token: z.string().optional().nullable(),
});

export const adminsUpdateSchema = z.object({
  address: z.string().optional(),
  environment: envTypeSchema.optional(),
  id: z.string().optional(),
  last_login: z.string().optional().nullable(),
  session_expiry: z.string().optional().nullable(),
  session_token: z.string().optional().nullable(),
});

export const adminsRelationshipsSchema = z.tuple([]);

export const channelNotificationsRowSchema = z.object({
  channel_address: z.string(),
  created_at: z.string(),
  id: z.number(),
  last_read_timestamp: z.string(),
  user_address: z.string(),
});

export const channelNotificationsInsertSchema = z.object({
  channel_address: z.string(),
  created_at: z.string().optional(),
  id: z.number().optional(),
  last_read_timestamp: z.string().optional(),
  user_address: z.string(),
});

export const channelNotificationsUpdateSchema = z.object({
  channel_address: z.string().optional(),
  created_at: z.string().optional(),
  id: z.number().optional(),
  last_read_timestamp: z.string().optional(),
  user_address: z.string().optional(),
});

export const channelNotificationsRelationshipsSchema = z.tuple([]);

export const channelRequestStatusSchema = z.union([
  z.literal("pending"),
  z.literal("whitelisted"),
  z.literal("blacklisted"),
]);

export const channelRequestsInsertSchema = z.object({
  channel_address: z.string(),
  channel_owner: z.string(),
  created_at: z.string().optional(),
  environment: envTypeSchema.optional(),
  id: z.number().optional(),
  status: channelRequestStatusSchema,
});

export const channelRequestsUpdateSchema = z.object({
  channel_address: z.string().optional(),
  channel_owner: z.string().optional(),
  created_at: z.string().optional(),
  environment: envTypeSchema.optional(),
  id: z.number().optional(),
  status: channelRequestStatusSchema.optional(),
});

export const channelRequestsRelationshipsSchema = z.tuple([]);

export const followersRowSchema = z.object({
  channel_address: z.string(),
  created_at: z.string(),
  id: z.number(),
  user_address: z.string(),
});

export const followersInsertSchema = z.object({
  channel_address: z.string(),
  created_at: z.string().optional(),
  id: z.number().optional(),
  user_address: z.string(),
});

export const followersUpdateSchema = z.object({
  channel_address: z.string().optional(),
  created_at: z.string().optional(),
  id: z.number().optional(),
  user_address: z.string().optional(),
});

export const followersRelationshipsSchema = z.tuple([]);

export const adminsRowSchema = z.object({
  address: z.string(),
  environment: envTypeSchema,
  id: z.string(),
  last_login: z.string().nullable(),
  session_expiry: z.string().nullable(),
  session_token: z.string().nullable(),
});

export const channelRequestsRowSchema = z.object({
  channel_address: z.string(),
  channel_owner: z.string(),
  created_at: z.string(),
  environment: envTypeSchema,
  id: z.number(),
  status: channelRequestStatusSchema,
});
